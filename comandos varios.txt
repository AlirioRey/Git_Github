******limpiar consoloa*******
clear
____________________________________
******en que directorio estoy******
pwd
____________________________________
******Ir al directorio anterior******
cd ..
______________________________________________________________________
******colocar anti slash (\) para cuando hay espacio entre texto******

 cd /c/Users/ACER\ 15/Desktop/git_hub/
______________________________________________________________________

******contenido de la carpeta******
ls
ls -l
ls -al
______________________________________________________________________

******ver el contenido de un archivo plano.txt******

 cat "comandos varios.txt"
______________________________________________________________________

******ver el historial de comandos ejecutados******

history 
______________________________________________________________________
******ejecutar alguno de los comandos anteriormente ejecutados en "history"******

!123
________________________________________________________________________________
*************************eliminar o remover un archivo**************************

rm hola.txt
________________________________________________________________________
*************************comandos extras de algun comando***********************

cd --help
cat --help
________________________________________________________________________________
***********************crear un archivo plano*****************************************

touch prueba.txt
____________________________________________________________________________________
***********crear carpeta oculta git para de repositorio de git alli justo donde estas*********
git init
____________________________________________________________________________________
***********en que estado está el repositorio git***********************************
git status
_______________________________________________________________________________________
**********agregar el archivo al servicio de seguimiento de versiones no iniciado**********

git add "comandos varios.txt"
nota: lo pone en verde listo para el commit
_______________________________________________________________________________________
**********iniciando trakeos de cambios de archivo en el arbol master*************

git commit -m "se ha agregado el add para el commit"

nota: solo si despues de ver git status el archivo está en verde, sino haz git add "xxx.txt"
_______________________________________________________________________________________
**********muestra todos los commits existentes dando codigo de cada version*************
git log

________________________________________________________________________________________
**********agregar el archivo al servicio "actualizaciones" así no sepas que modificaste********
git add .
________________________________________________________________________________________
***************Eliminar el último add de actualización que llevoa verde********************

git rm --cached "prueba.txt"
nota: devuelve a rojo
______________________________________________________________________________________
****************devuelvete a la versión que quieras*****************************

git checkout 6eb23a7bc81e3b902a9e333e55e509555f179024

nota: antes revisa haber guardado los cambio o el chekout podria sobreescribir lo último
_____________________________________________________________________________________________
****************devuelvete a la versión master*****************************

git checkout master
_____________________________________________________________________________________________
****************Cambiar el nombre y correo globalmente*****************************

git config --global user.name "AlirioRey"

git config --global user.email "reyrotceh@gmail.com"
____________________________________________________________________________________________ 
****************Mostrar los cambios que has hecho*****************************

git show

nota: sales de ese estado con la letra ( q )
__________________________________________________________________________________________
****************Mostrar todas las diferencias entre dos commits*****************************

git diff 082736464645 47475859959

nota: primero se coloca el mas viejo y luego el commit mas nuevo
__________________________________________________________________________________________
****************Agrega el add y el commit en una sola operación*****************************

git commit -am          *********con mensaje********
_____________________________________________________________________________________________
****************ver todos los commits pero adicionalmenten ves detalles de las modificaciones**

git log --stat 
_____________________________________________________________________________________________
****************Salir del VIN cuando haces el commit sin mensaje*****************************

Esc la tecla luego :wq
_____________________________________________________________________________________________
****************Crear una rama apartir del master hacia adelante******************************

git branch xxxxnombre de la ramaxxxx

nota: la x es el nombre que le daras a la rama
______________________________________________________________________________________________
****************visualiza todas las ramas, tu rama actual en verde******************************

git branch
_______________________________________________________________________________________________
****************ver los commit de una rama que no es master**********

git log ****nombre de la rama*****
____________________________________________________________________________________________
**************************unión de ramas por merge en un nuevo commit que une las dos ramas*******

git merge ****nombre de la rama distinta a la master o a la que esta invocando el merge*****

nota: el merge se invoca desde la rama que persistira es decir la rama master de producción
o principal, si no recuerdas el nombre coloca git branch.
______________________________________________________________________________________________
****************conflictos del merge por modificación del mismo dato**********
1.- no prospera el commit y se origina un (master| MERGING)
2.- dentro del archivo se originan dos lineas con el mismo dato, etoca eliminar una de ellas y así
resuelves el conflicto.
3.- desde el master o desde donde se invocó el merge se ejecuta un (git commit -am "solucionamos el conflicto"

______________________________________________________________________________________
master es  git y main es github
_____________________________________________________________________________________
****************subir un repositorio de rama master de git a Github**********

1.- git remote add origin https://github.com/AlirioRey/appCursoGit.git

nota: la dirección https nos la da github desde CODE

2.- git remote o git remote -v (esto nos indica el nombre de el envío y destino y acciones)

3.- git pull origin main (hace un fetch + un merge)
4.- git pull origin main --allow-unrelated-histories (inserta el readme de github y hace que todo esta bien)
5.- ls -al  (revisar que esté el readme)
6.- git status
7.- git commit -am "se actualizo readme"
8.- git push origin main

_______________________________________________________________________________________
git remote remove origin 
_______________________________________________________________________________________
9.- prueba github 
10.- probado SSH












	







